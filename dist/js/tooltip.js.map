{"version":3,"sources":["tooltip.js"],"names":["console","log","Tooltip","selector","text","overrideOptions","requiredOptions","defatultOptions","backgroundColor","color","position"],"mappings":";;AAAA;;;;AAGAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2IOC,O,GAEN,iBAAYC,QAAZ,EAAsBC,IAAtB,EAA4BC,eAA5B,EAA6CC,eAA7C,EAA6D;AAAA;;AAE5D,MAAMC,eAAe,GAAC;AACrBC,IAAAA,eAAe,EAAE,QADI;AAErBC,IAAAA,KAAK,EAAC,OAFe;AAGrBC,IAAAA,QAAQ,EAAE;AAHW,GAAtB;AAKA,C","sourcesContent":["import { timingSafeEqual } from \"crypto\";\n\n \nconsole.log(\"connected\");\n\n\n\n/* /a callback function is placing a function as a paramater(argument) to be called later, not run instantly [ i.e using () ] \n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nconsole.log(\"connected\"); //a callback function is placing a function as a paramater(argument) to be called later, not run instantly [ i.e using () ] \n// callback function example:\n\nvar Tooltip = //FUNCTIONS I NEED \n//functionNamehere = () => {}  // this is how you write a fat arrow function \n//createTooltip = (selector, text) => {} // parameters in () and formula in {}\n//showTooltip = () => {}  \n//hideTooltip\n//setupListeners\nfunction Tooltip(selector, text, overrideOptions) {\n  _classCallCheck(this, Tooltip);\n\n  var defaultOptions = {\n    backgroundColor: 'yellow',\n    //getBackgroundColor: null ... getBackgroundColor is a placeholder that can be passed a optional paramater later\n    getBackgroundColor: function getBackgroundColor() {},\n    // i.e a function passed as a parameter, to be run when called, and not instantanouesly [unless told to run using ()]\n    color: 'black',\n    tooltipSpeed: 100 //object.assign takes given paramerters and merges them into new paramaters, going in order. The last parameter will always be \"required options\" as they will be passed last \n    //defatultOptions{ color: red, font: 100, opactiy:0}\n    //OverrideOptions { color: blue, font: 300, opacity:1}\n    //.... additonal parameters (OPTIONAL)\n    //*LAST* requiredOptions {font:200}\n    // combinedOptions = Object.assign({}, defaultOptions, overrideOptions, requriedOptions) \n    // combinedOptions { color: blue, font: 200, opacity:1}  \n\n  };\n  console.log('options before', {\n    defaultOptions: defaultOptions,\n    overrideOptions: overrideOptions\n  }); // tell me the default options and override options values\n\n  var combinedOptions = Object.assign({}, defaultOptions, overrideOptions); // make a new object with the following paramaters in this order: curly brakets, then put values of defaultoptions inside, then add/overrite to default with overridetOptions\n\n  console.log('options after', {\n    combinedOptions: combinedOptions,\n    defaultOptions: defaultOptions,\n    overrideOptions: overrideOptions\n  }); // tell me the value of the new object and the old ones too \n\n  this.options = combinedOptions; // .options is a title holder [i.e this.puppy] whenever I refer to this.options [this = this instance aka this Tooltip i.e googleTooolTip], I am talking about the values from combinedOptions\n\n  console.log('bg before', this.options.backgroundColor); // tell me the value of backgroundColor right now ['yellow']\n\n  if (this.options.getBackgroundColor) {\n    // if this variable name contains \"something\".. [function, string, whatever]\n    console.log('getBackgroundcolor', {\n      type: _typeof(this.options.getBackgroundColor),\n      // tell us the value of it  and what type of value it is\n      getBG: this.options.getBackgroundColor\n    }); // getBG is a title that can be set to anything // use getBG: tell me the color\n\n    if (typeof this.options.getBackgroundColor == 'function') {\n      // if the value type is a function [not a string or intiger, etc]\n      this.options.backgroundColor = this.options.getBackgroundColor(); //  THIS IS WHERE THE CALLBACK FUNCTION IS CALLED!  run the callback function [getBackhroundColor()] and assign result as new value of parameter [backgroundColor] \n    }\n  }\n}; //////////////////////THIS IS FOR THE OTHER PAGE WHERE THE ACUTAL TOOLTIPS ARE CALLED\n//the 'DEFAULT OPTIONS' ARE ALREADY SET INSIDE THE TOOLTIP FUNCTION <<see above>>\n\n\nfunction makeItPink() {\n  return 'Pink';\n}\n\nvar googleOverrideOptions = {\n  fontSize: '20px',\n  backgroundColor: 'yellow',\n  tooltipSpeed: 2000,\n  getBackgroundColor: makeItPink //do not call makItPink() otherwise funciton will run instantly. Just use name, no ();\n\n};\nvar twitterOverrideOptions = {\n  fontSize: '50px',\n  tooltipSpeed: 100,\n  backgroundColor: 'orange'\n};\nvar googleTooltip = new Tooltip('.google-link', 'Click here Google', //default options are given in the function\ngoogleOverrideOptions); // new options stored in a variable \n\nvar twitterTooltip = new Tooltip('.twitter-link', 'Click here Twitter', //default options are given in the function \ntwitterOverrideOptions);\n\n// callback function example:\n\nclass Tooltip {\n\n\t//FUNCTIONS I NEED \n\t//functionNamehere = () => {}  // this is how you write a fat arrow function \n\t//createTooltip = (selector, text) => {} // parameters in () and formula in {}\n\t//showTooltip = () => {}  \n\t//hideTooltip\n\t//setupListeners\n\n\tconstructor(selector, text, overrideOptions){\n\n\t\tconst defaultOptions = {\n\t\t\tbackgroundColor: 'yellow',\n\t\t\t//getBackgroundColor: null ... getBackgroundColor is a placeholder that can be passed a optional paramater later\n\t\t\tgetBackgroundColor: function(){}, // i.e a function passed as a parameter, to be run when called, and not instantanouesly [unless told to run using ()]\n\t\t\tcolor: 'black',\n\t\t\ttooltipSpeed: 100,\n\t\t}\n\n\t\t//object.assign takes given paramerters and merges them into new paramaters, going in order. The last parameter will always be \"required options\" as they will be passed last \n\t\t//defatultOptions{ color: red, font: 100, opactiy:0}\n\t\t//OverrideOptions { color: blue, font: 300, opacity:1}\n\t\t//.... additonal parameters (OPTIONAL)\n\t\t//*LAST* requiredOptions {font:200}\n\t\t// combinedOptions = Object.assign({}, defaultOptions, overrideOptions, requriedOptions) \n\t\t// combinedOptions { color: blue, font: 200, opacity:1}  \n\n\n\t\tconsole.log('options before', {defaultOptions, overrideOptions}) // tell me the default options and override options values\n\t\tconst combinedOptions =  Object.assign({}, defaultOptions, overrideOptions); // make a new object with the following paramaters in this order: curly brakets, then put values of defaultoptions inside, then add/overrite to default with overridetOptions\n\t\tconsole.log('options after', {combinedOptions, defaultOptions, overrideOptions}) // tell me the value of the new object and the old ones too \n\t\tthis.options = combinedOptions // .options is a title holder [i.e this.puppy] whenever I refer to this.options [this = this instance aka this Tooltip i.e googleTooolTip], I am talking about the values from combinedOptions\n\n\t\tconsole.log('bg before', this.options.backgroundColor) // tell me the value of backgroundColor right now ['yellow']\n\t\tif(this.options.getBackgroundColor){ // if this variable name contains \"something\".. [function, string, whatever]\n\t\t\tconsole.log('getBackgroundcolor', {type: typeof this.options.getBackgroundColor,  // tell us the value of it  and what type of value it is\n\t\t\t\t\t\t\t\t\t\t\t\tgetBG: this.options.getBackgroundColor}) // getBG is a title that can be set to anything // use getBG: tell me the color\n\t\t\tif (typeof this.options.getBackgroundColor == 'function'){  // if the value type is a function [not a string or intiger, etc]\n\t\t\t\tthis.options.backgroundColor = this.options.getBackgroundColor() //  THIS IS WHERE THE CALLBACK FUNCTION IS CALLED!  run the callback function [getBackhroundColor()] and assign result as new value of parameter [backgroundColor] \n\t\t\t}\n\t\t}\n\n\n\n\t}\n}\n */\n\n class Tooltip {\n\n\tconstructor(selector, text, overrideOptions, requiredOptions){\n\t\t\n\t\tconst defatultOptions={\n\t\t\tbackgroundColor: 'yellow',\n\t\t\tcolor:'black',\n\t\t\tposition: null\n\t\t}\n\t}\n }\n\n\n"],"file":"tooltip.js"}