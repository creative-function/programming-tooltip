{"version":3,"sources":["tooltip.js"],"names":["console","log","Tooltip","className","hoverText","overrideOptions","requiredOptions","$linkEl","document","querySelector","$hoverDiv","createElement","$popupText","createTextNode","defaultOptions","color","backgroundColor","override","tooltipPosition","showTooltip","linkPosition","getBoundingClientRect","appendChild","body","style","position","height","left","right","top","combinedOptions","Object","assign","options","type","getBG","hideTooltip","removeChild","addEventListener"],"mappings":"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","sourcesContent":["\n/*\n\n\t// link to the googlelink class in html\n\n\n\t//add event listener \"mouseover\"\n\n\t //on mouserove, fly the tooltip up and display the text\n\t\t // create a div\n\t\t //add it ot the page\n\t\t // make it slide up \n\n\t //on mouseout, remove tooltip \n\t\t // remove the div\n\t\t \n\t\t //FUNCTIONS I NEED \n\t//functionNamehere = () => {}  // this is how you write a fat arrow function \n\t//createTooltip = (selector, text) => {} // parameters in () and formula in {}\n\t//showTooltip = () => {}  \n\t//hideTooltip\n\t//setupListeners\n*/\n \nconsole.log(\"HW3 Take 2\");\n\n\nclass Tooltip {\n\tconstructor(className, hoverText, overrideOptions, requiredOptions) {\n\n\t\tlet $linkEl = document.querySelector(className);\n\n\t\tlet $hoverDiv = document.createElement(\"div\");\n\n\t\tlet $popupText = document.createTextNode(hoverText);\n\n\t\tlet defaultOptions = {\n\t\t\tcolor:'black',\n\t\t\tbackgroundColor:'yellow',\n\t\t\toverride: overrideOptions,\n\t\t\ttooltipPosition: 'none'\n\t\t}\n\n\n\t\tlet showTooltip = () => {\n\n\t\t\tlet linkPosition = $linkEl.getBoundingClientRect(); \n\t\t\t\n\t\t\t$hoverDiv.appendChild($popupText);\n\t\t\tdocument.body.appendChild($hoverDiv);\n\t\t\t$hoverDiv.style.position = \"absolute\";\n\t\t\t$hoverDiv.style.height = \"25\" + \"px\";\n\t\t\t$hoverDiv.style.left =linkPosition.right + \"100\" + 'px';\n\t\t\t$hoverDiv.style.top=linkPosition.top + \"100\" + 'px';\n\t\t\t$hoverDiv.style.backgroundColor= defaultOptions.backgroundColor;\n\t\t\t\n\t\t\tconsole.log(\"showing \" + className + \" tooltip\");\n\n\t\t\tconsole.log('options before', {defaultOptions, overrideOptions}) // tell me the default options and override options values\n\t\t\tconst combinedOptions =  Object.assign({}, defaultOptions, overrideOptions); // make a new object with the following paramaters in this order: curly brakets, then put values of defaultoptions inside, then add/overrite to default with overridetOptions\n\t\t\tconsole.log('options after', {combinedOptions, defaultOptions, overrideOptions}) // tell me the value of the new object and the old ones too \n\t\t\tthis.options = combinedOptions // .options is a title holder [i.e this.puppy] whenever I refer to this.options [this = this instance aka this Tooltip i.e googleTooolTip], I am talking about the values from combinedOptions\n\t\n\t\t\tconsole.log('bg before', this.options.backgroundColor) // tell me the value of backgroundColor right now ['yellow']\n\t\t\tif(this.options.override){ // if this variable name contains \"something\".. [function, string, whatever]\n\t\t\t\tconsole.log('override', {type: typeof this.options.override,  // tell us the value of it  and what type of value it is\n\t\t\t\t\t\t\t\t\t\t\t\t\tgetBG: this.options.backgroundColor}) // getBG is a title that can be set to anything // use getBG: tell me the color\n\t\t\t\tif (typeof this.options.override == 'function'){  // if the value type is a function [not a string or intiger, etc]\n\t\t\t\t\tthis.options.backgroundColor = this.options.overrideOptions() //  THIS IS WHERE THE CALLBACK FUNCTION IS CALLED!  run the callback function [getBackhroundColor()] and assign result as new value of parameter [backgroundColor] \n\t\t\t\t}\n\t\t\t}\n\t\n\t\t}\n\n\t\tlet hideTooltip = () => {\n\t\t\tdocument.body.removeChild($hoverDiv);\n\t\t\tconsole.log(\"deleted tooltip\");\n\t\t}\n\n\t\t$linkEl.addEventListener(\"mouseover\", showTooltip());\n\n\t\t// $linkEl.addEventListener(\"mouseout\", hideTooltip());\n\n\n\n\t\t//object.assign takes given paramerters and merges them into new paramaters, going in order. The last parameter will always be \"required options\" as they will be passed last \n\t\t//defatultOptions{ color: red, font: 100, opactiy:0}\n\t\t//OverrideOptions { color: blue, font: 300, opacity:1}\n\t\t//.... additonal parameters (OPTIONAL)\n\t\t//*LAST* requiredOptions {font:200}\n\t\t// combinedOptions = Object.assign({}, defaultOptions, overrideOptions, requriedOptions) \n\t\t// combinedOptions { color: blue, font: 200, opacity:1}  \n\n\n\t\n\n\n\n\n\n\n\n\n\n\n\t}\n}\n\n\n"],"file":"tooltip.js"}