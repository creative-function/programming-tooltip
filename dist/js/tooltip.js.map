{"version":3,"sources":["tooltip.js"],"names":["console","log","Tooltip","className","hoverText","overrideOptions","requiredOptions","$linkEl","document","querySelector","$hoverDiv","createElement","$popupText","createTextNode","defaultOptions","color","backgroundColor","tooltipPosition","addEventListener","appendChild","body","linkPosition","getBoundingClientRect","style","position","height","left","right","top","removeChild","combinedOptions","Object","assign","options","getBackgroundColor","type","getBG"],"mappings":"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","sourcesContent":["\n/*\n\n\t// link to the googlelink class in html\n\n\n\t//add event listener \"mouseover\"\n\n\t //on mouserove, fly the tooltip up and display the text\n\t\t // create a div\n\t\t //add it ot the page\n\t\t // make it slide up \n\n\t //on mouseout, remove tooltip \n\t\t // remove the div\n\t\t \n\t\t //FUNCTIONS I NEED \n\t//functionNamehere = () => {}  // this is how you write a fat arrow function \n\t//createTooltip = (selector, text) => {} // parameters in () and formula in {}\n\t//showTooltip = () => {}  \n\t//hideTooltip\n\t//setupListeners\n*/\n \nconsole.log(\"HW3 Take 2\");\n\n\nclass Tooltip {\n\tconstructor(className, hoverText, overrideOptions, requiredOptions) {\n\n\t\tlet $linkEl = document.querySelector(className);\n\n\t\tlet $hoverDiv = document.createElement(\"div\");\n\n\t\tlet $popupText = document.createTextNode(hoverText);\n\n\t\tlet defaultOptions = {\n\t\t\tcolor:'black',\n\t\t\tbackgroundColor:'yellow',\n\t\t\ttooltipPosition: null,\n\t\t}\n\n\n\n\n\t\t$linkEl.addEventListener(\"mouseover\", function(){\n\t\t\t$hoverDiv.appendChild($popupText);\n\n\t\t\tdocument.body.appendChild($hoverDiv);\n\n\t\t\tlet linkPosition = $linkEl.getBoundingClientRect();\n\n\t\t\t$hoverDiv.style.position = \"absolute\";\n\t\t\t$hoverDiv.style.height = \"25\" + \"px\";\n\t\t\t$hoverDiv.style.left =linkPosition.right + \"100\" + 'px';\n\t\t\t$hoverDiv.style.top=linkPosition.top + \"100\" + 'px';\n\t\t\t$hoverDiv.style.backgroundColor= defaultOptions.backgroundColor;\n\t\t\t\n\n\t\t\tconsole.log(\"showing tooltip\");\n\n\t\t})\n\n\t\t$linkEl.addEventListener(\"mouseout\", function(){\n\t\t\tdocument.body.removeChild($hoverDiv);\n\n\t\t\tconsole.log(\"deleted tooltip\");\n\n\t\t})\n\n\n\n\t\t//object.assign takes given paramerters and merges them into new paramaters, going in order. The last parameter will always be \"required options\" as they will be passed last \n\t\t//defatultOptions{ color: red, font: 100, opactiy:0}\n\t\t//OverrideOptions { color: blue, font: 300, opacity:1}\n\t\t//.... additonal parameters (OPTIONAL)\n\t\t//*LAST* requiredOptions {font:200}\n\t\t// combinedOptions = Object.assign({}, defaultOptions, overrideOptions, requriedOptions) \n\t\t// combinedOptions { color: blue, font: 200, opacity:1}  \n\n\n\t\tconsole.log('options before', {defaultOptions, overrideOptions}) // tell me the default options and override options values\n\t\tconst combinedOptions =  Object.assign({}, defaultOptions, overrideOptions); // make a new object with the following paramaters in this order: curly brakets, then put values of defaultoptions inside, then add/overrite to default with overridetOptions\n\t\tconsole.log('options after', {combinedOptions, defaultOptions, overrideOptions}) // tell me the value of the new object and the old ones too \n\t\tthis.options = combinedOptions // .options is a title holder [i.e this.puppy] whenever I refer to this.options [this = this instance aka this Tooltip i.e googleTooolTip], I am talking about the values from combinedOptions\n\n\t\tconsole.log('bg before', this.options.backgroundColor) // tell me the value of backgroundColor right now ['yellow']\n\t\tif(this.options.getBackgroundColor){ // if this variable name contains \"something\".. [function, string, whatever]\n\t\t\tconsole.log('getBackgroundcolor', {type: typeof this.options.getBackgroundColor,  // tell us the value of it  and what type of value it is\n\t\t\t\t\t\t\t\t\t\t\t\tgetBG: this.options.getBackgroundColor}) // getBG is a title that can be set to anything // use getBG: tell me the color\n\t\t\tif (typeof this.options.getBackgroundColor == 'function'){  // if the value type is a function [not a string or intiger, etc]\n\t\t\t\tthis.options.backgroundColor = this.options.getBackgroundColor() //  THIS IS WHERE THE CALLBACK FUNCTION IS CALLED!  run the callback function [getBackhroundColor()] and assign result as new value of parameter [backgroundColor] \n\t\t\t}\n\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\t}\n}\n\n\n"],"file":"tooltip.js"}